Structure Node:
    keyRange      // [startKey, endKey]
    bloomFilter   // For fast membership tests
    fileRef       // Identifier for SST file ("Memory" indicates non-leaf)
    children      // List of child nodes

Structure Combo:
    nodes         // One Node per column
    keyRange      // Intersection of all node key ranges

Structure BloomTree:
    root          // Root node of the BloomTree


FUNCTION computeIntersection(nodes):
    // Returns the intersection of key ranges from a list of nodes.
    intersection = initial key range from first node
    FOR each subsequent node:
        Update intersection using maximum of start keys and minimum of end keys
    RETURN intersection

FUNCTION finalSstScan(combo, values, dbManager):
    // For each node in combo, scan the corresponding SST file to obtain matching keys.
    keySets = FOR each node in combo:
                  Scan SST file for keys matching given value in the node's effective range
    RETURN Intersection(keySets)

FUNCTION dfsQuery(values, currentCombo, dbManager):
    // Prune branch if any node's bloom filter does not contain the value.
    FOR each node in currentCombo:
        IF bloomFilter does not contain corresponding value:
            RETURN

    // Abort if intersection of key ranges is invalid.
    IF currentCombo.keyRange is empty:
        RETURN

    // If every node is a leaf, perform a final precise scan.
    IF all nodes in currentCombo are leaf nodes:
        matches = finalSstScan(currentCombo, values, dbManager)
        ADD matches to globalResult
        RETURN

    // Otherwise, for each column, obtain children nodes passing bloom filter.
    candidateLists = FOR each node in currentCombo:
                         IF node is not a leaf:
                             LIST = all children with bloom filter passing the respective value
                         ELSE:
                             LIST = node itself

    // Iterate through all combinations (Cartesian product) of candidate child nodes.
    FOR each combination in candidateLists:
        newKeyRange = computeIntersection(child nodes' key ranges)
        IF newKeyRange is valid:
            newCombo = Combo(child nodes, newKeyRange)
            dfsQuery(values, newCombo, dbManager)

FUNCTION multiColumnQuery(trees, values, globalRange, dbManager):
    // Validate input and initialize search with roots of each tree.
    IF number of trees != number of values OR trees is empty:
        PRINT error and EXIT

    initialCombo.nodes = FOR each tree:
                             tree.root
    initialCombo.keyRange = Adjust globalRange based on root nodes' key ranges

    CLEAR globalResult
    dfsQuery(values, initialCombo, dbManager)
    RETURN globalResult
